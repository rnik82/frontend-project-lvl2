"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _process = _interopRequireDefault(require("process"));

var _fs = _interopRequireDefault(require("fs"));

var _jsYaml = _interopRequireDefault(require("js-yaml"));

var _ini = _interopRequireDefault(require("ini"));

var _lodash = _interopRequireDefault(require("lodash"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const changeStrToNumber = object => {
  const keys = Object.keys(object);
  return keys.reduce((acc, key) => {
    const value = object[key];

    if (_lodash.default.isObject(value)) {
      return { ...acc,
        [key]: changeStrToNumber(value)
      };
    }

    const valueForCheck = Number(value);
    const newValue = !_lodash.default.isBoolean(value) && !_lodash.default.isNaN(valueForCheck) ? valueForCheck : value;
    return { ...acc,
      [key]: newValue
    };
  }, {});
};

const recieveParsedData = pathToFile => {
  var _path$resolve;

  const relativPath = _process.default.cwd();

  const format = _path.default.extname(pathToFile); //const absolutePath = path.resolve(relativPath, pathToFile);
  //const data = fs.readFileSync(absolutePath, 'utf-8');


  const chooseParser = {
    '.json': JSON.parse,
    '.yml': _jsYaml.default.safeLoad,
    '.ini': _ini.default.parse
  };
  const parse = chooseParser[format];
  const data = (_path$resolve = _path.default.resolve(relativPath, pathToFile), _fs.default.readFileSync(_path$resolve, 'utf-8'));
  return format === '.ini' ? changeStrToNumber(parse(data)) : parse(data);
};

var _default = (pathToFile1, pathToFile2) => {
  const parsedData1 = recieveParsedData(pathToFile1);
  const parsedData2 = recieveParsedData(pathToFile2);
  return [parsedData1, parsedData2];
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJzZXJzLmpzIl0sIm5hbWVzIjpbImNoYW5nZVN0clRvTnVtYmVyIiwib2JqZWN0Iiwia2V5cyIsIk9iamVjdCIsInJlZHVjZSIsImFjYyIsImtleSIsInZhbHVlIiwiXyIsImlzT2JqZWN0IiwidmFsdWVGb3JDaGVjayIsIk51bWJlciIsIm5ld1ZhbHVlIiwiaXNCb29sZWFuIiwiaXNOYU4iLCJyZWNpZXZlUGFyc2VkRGF0YSIsInBhdGhUb0ZpbGUiLCJyZWxhdGl2UGF0aCIsInByb2Nlc3MiLCJjd2QiLCJmb3JtYXQiLCJwYXRoIiwiZXh0bmFtZSIsImNob29zZVBhcnNlciIsIkpTT04iLCJwYXJzZSIsInlhbWwiLCJzYWZlTG9hZCIsImluaSIsImRhdGEiLCJyZXNvbHZlIiwiZnMiLCJyZWFkRmlsZVN5bmMiLCJwYXRoVG9GaWxlMSIsInBhdGhUb0ZpbGUyIiwicGFyc2VkRGF0YTEiLCJwYXJzZWREYXRhMiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBRUEsTUFBTUEsaUJBQWlCLEdBQUlDLE1BQUQsSUFBWTtBQUNwQyxRQUFNQyxJQUFJLEdBQUdDLE1BQU0sQ0FBQ0QsSUFBUCxDQUFZRCxNQUFaLENBQWI7QUFFQSxTQUFPQyxJQUFJLENBQUNFLE1BQUwsQ0FBWSxDQUFDQyxHQUFELEVBQU1DLEdBQU4sS0FBYztBQUMvQixVQUFNQyxLQUFLLEdBQUdOLE1BQU0sQ0FBQ0ssR0FBRCxDQUFwQjs7QUFDQSxRQUFJRSxnQkFBRUMsUUFBRixDQUFXRixLQUFYLENBQUosRUFBdUI7QUFDckIsYUFBTyxFQUFFLEdBQUdGLEdBQUw7QUFBVSxTQUFDQyxHQUFELEdBQU9OLGlCQUFpQixDQUFDTyxLQUFEO0FBQWxDLE9BQVA7QUFDRDs7QUFDRCxVQUFNRyxhQUFhLEdBQUdDLE1BQU0sQ0FBQ0osS0FBRCxDQUE1QjtBQUNBLFVBQU1LLFFBQVEsR0FBRyxDQUFDSixnQkFBRUssU0FBRixDQUFZTixLQUFaLENBQUQsSUFBdUIsQ0FBQ0MsZ0JBQUVNLEtBQUYsQ0FBUUosYUFBUixDQUF4QixHQUNiQSxhQURhLEdBQ0dILEtBRHBCO0FBR0EsV0FBTyxFQUFFLEdBQUdGLEdBQUw7QUFBVSxPQUFDQyxHQUFELEdBQU9NO0FBQWpCLEtBQVA7QUFDRCxHQVZNLEVBVUosRUFWSSxDQUFQO0FBV0QsQ0FkRDs7QUFnQkEsTUFBTUcsaUJBQWlCLEdBQUlDLFVBQUQsSUFBZ0I7QUFBQTs7QUFDeEMsUUFBTUMsV0FBVyxHQUFHQyxpQkFBUUMsR0FBUixFQUFwQjs7QUFFQSxRQUFNQyxNQUFNLEdBQUdDLGNBQUtDLE9BQUwsQ0FBYU4sVUFBYixDQUFmLENBSHdDLENBS3hDO0FBQ0E7OztBQUVBLFFBQU1PLFlBQVksR0FBRztBQUNuQixhQUFTQyxJQUFJLENBQUNDLEtBREs7QUFFbkIsWUFBUUMsZ0JBQUtDLFFBRk07QUFHbkIsWUFBUUMsYUFBSUg7QUFITyxHQUFyQjtBQUtBLFFBQU1BLEtBQUssR0FBR0YsWUFBWSxDQUFDSCxNQUFELENBQTFCO0FBRUEsUUFBTVMsSUFBSSxvQkFBR1IsY0FBS1MsT0FBTCxDQUFhYixXQUFiLEVBQTBCRCxVQUExQixDQUFILEVBQ0xlLFlBQUdDLFlBQUgsZ0JBQW1CLE9BQW5CLENBREssQ0FBVjtBQUdBLFNBQU9aLE1BQU0sS0FBSyxNQUFYLEdBQW9CcEIsaUJBQWlCLENBQUN5QixLQUFLLENBQUNJLElBQUQsQ0FBTixDQUFyQyxHQUFxREosS0FBSyxDQUFDSSxJQUFELENBQWpFO0FBQ0QsQ0FuQkQ7O2VBcUJlLENBQUNJLFdBQUQsRUFBY0MsV0FBZCxLQUE4QjtBQUMzQyxRQUFNQyxXQUFXLEdBQUdwQixpQkFBaUIsQ0FBQ2tCLFdBQUQsQ0FBckM7QUFDQSxRQUFNRyxXQUFXLEdBQUdyQixpQkFBaUIsQ0FBQ21CLFdBQUQsQ0FBckM7QUFDQSxTQUFPLENBQUNDLFdBQUQsRUFBY0MsV0FBZCxDQUFQO0FBQ0QsQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHByb2Nlc3MgZnJvbSAncHJvY2Vzcyc7XG5pbXBvcnQgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IHlhbWwgZnJvbSAnanMteWFtbCc7XG5pbXBvcnQgaW5pIGZyb20gJ2luaSc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG5jb25zdCBjaGFuZ2VTdHJUb051bWJlciA9IChvYmplY3QpID0+IHtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG5cbiAgcmV0dXJuIGtleXMucmVkdWNlKChhY2MsIGtleSkgPT4ge1xuICAgIGNvbnN0IHZhbHVlID0gb2JqZWN0W2tleV07XG4gICAgaWYgKF8uaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICByZXR1cm4geyAuLi5hY2MsIFtrZXldOiBjaGFuZ2VTdHJUb051bWJlcih2YWx1ZSkgfTtcbiAgICB9XG4gICAgY29uc3QgdmFsdWVGb3JDaGVjayA9IE51bWJlcih2YWx1ZSk7XG4gICAgY29uc3QgbmV3VmFsdWUgPSAhXy5pc0Jvb2xlYW4odmFsdWUpICYmICFfLmlzTmFOKHZhbHVlRm9yQ2hlY2spXG4gICAgICA/IHZhbHVlRm9yQ2hlY2sgOiB2YWx1ZTtcblxuICAgIHJldHVybiB7IC4uLmFjYywgW2tleV06IG5ld1ZhbHVlIH07XG4gIH0sIHt9KTtcbn07XG5cbmNvbnN0IHJlY2lldmVQYXJzZWREYXRhID0gKHBhdGhUb0ZpbGUpID0+IHtcbiAgY29uc3QgcmVsYXRpdlBhdGggPSBwcm9jZXNzLmN3ZCgpO1xuICBcbiAgY29uc3QgZm9ybWF0ID0gcGF0aC5leHRuYW1lKHBhdGhUb0ZpbGUpO1xuXG4gIC8vY29uc3QgYWJzb2x1dGVQYXRoID0gcGF0aC5yZXNvbHZlKHJlbGF0aXZQYXRoLCBwYXRoVG9GaWxlKTtcbiAgLy9jb25zdCBkYXRhID0gZnMucmVhZEZpbGVTeW5jKGFic29sdXRlUGF0aCwgJ3V0Zi04Jyk7XG5cbiAgY29uc3QgY2hvb3NlUGFyc2VyID0ge1xuICAgICcuanNvbic6IEpTT04ucGFyc2UsXG4gICAgJy55bWwnOiB5YW1sLnNhZmVMb2FkLFxuICAgICcuaW5pJzogaW5pLnBhcnNlLFxuICB9O1xuICBjb25zdCBwYXJzZSA9IGNob29zZVBhcnNlcltmb3JtYXRdO1xuXG4gIGNvbnN0IGRhdGEgPSBwYXRoLnJlc29sdmUocmVsYXRpdlBhdGgsIHBhdGhUb0ZpbGUpXG4gICAgfD4gZnMucmVhZEZpbGVTeW5jKCMsICd1dGYtOCcpO1xuICBcbiAgcmV0dXJuIGZvcm1hdCA9PT0gJy5pbmknID8gY2hhbmdlU3RyVG9OdW1iZXIocGFyc2UoZGF0YSkpIDogcGFyc2UoZGF0YSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCAocGF0aFRvRmlsZTEsIHBhdGhUb0ZpbGUyKSA9PiB7XG4gIGNvbnN0IHBhcnNlZERhdGExID0gcmVjaWV2ZVBhcnNlZERhdGEocGF0aFRvRmlsZTEpO1xuICBjb25zdCBwYXJzZWREYXRhMiA9IHJlY2lldmVQYXJzZWREYXRhKHBhdGhUb0ZpbGUyKTtcbiAgcmV0dXJuIFtwYXJzZWREYXRhMSwgcGFyc2VkRGF0YTJdO1xufTtcbiJdfQ==