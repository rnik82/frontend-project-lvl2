"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _process = _interopRequireDefault(require("process"));

var _fs = _interopRequireDefault(require("fs"));

var _jsYaml = _interopRequireDefault(require("js-yaml"));

var _ini = _interopRequireDefault(require("ini"));

var _lodash = _interopRequireDefault(require("lodash"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const changeStrInIni = object => {
  const keys = Object.keys(object);
  keys.map(k => {
    const value = object[k];
    const valueForCheck = Number(value);
    const newValue = !_lodash.default.isBoolean(value) && !_lodash.default.isNaN(valueForCheck) ? valueForCheck : value;
    object[k] = newValue;
  });
  return object;
};

var _default = pathToFile => {
  const relativPath = _process.default.cwd();

  const format = _path.default.extname(pathToFile);

  const absolutePath = _path.default.resolve(relativPath, '__fixtures__', pathToFile);

  const data = _fs.default.readFileSync(absolutePath, 'utf-8');

  const chooseParser = {
    '.json': JSON.parse,
    '.yml': _jsYaml.default.safeLoad,
    '.ini': _ini.default.parse
  };
  const parse = chooseParser[format];
  const result = format === '.ini' ? changeStrInIni(parse(data)) : parse(data);
  return result;
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJzZXJzLmpzIl0sIm5hbWVzIjpbImNoYW5nZVN0ckluSW5pIiwib2JqZWN0Iiwia2V5cyIsIk9iamVjdCIsIm1hcCIsImsiLCJ2YWx1ZSIsInZhbHVlRm9yQ2hlY2siLCJOdW1iZXIiLCJuZXdWYWx1ZSIsIl8iLCJpc0Jvb2xlYW4iLCJpc05hTiIsInBhdGhUb0ZpbGUiLCJyZWxhdGl2UGF0aCIsInByb2Nlc3MiLCJjd2QiLCJmb3JtYXQiLCJwYXRoIiwiZXh0bmFtZSIsImFic29sdXRlUGF0aCIsInJlc29sdmUiLCJkYXRhIiwiZnMiLCJyZWFkRmlsZVN5bmMiLCJjaG9vc2VQYXJzZXIiLCJKU09OIiwicGFyc2UiLCJ5YW1sIiwic2FmZUxvYWQiLCJpbmkiLCJyZXN1bHQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUVBLE1BQU1BLGNBQWMsR0FBSUMsTUFBRCxJQUFZO0FBQ2pDLFFBQU1DLElBQUksR0FBR0MsTUFBTSxDQUFDRCxJQUFQLENBQVlELE1BQVosQ0FBYjtBQUNBQyxFQUFBQSxJQUFJLENBQUNFLEdBQUwsQ0FBVUMsQ0FBRCxJQUFPO0FBQ2QsVUFBTUMsS0FBSyxHQUFHTCxNQUFNLENBQUNJLENBQUQsQ0FBcEI7QUFDQSxVQUFNRSxhQUFhLEdBQUdDLE1BQU0sQ0FBQ0YsS0FBRCxDQUE1QjtBQUNBLFVBQU1HLFFBQVEsR0FBRyxDQUFDQyxnQkFBRUMsU0FBRixDQUFZTCxLQUFaLENBQUQsSUFBdUIsQ0FBQ0ksZ0JBQUVFLEtBQUYsQ0FBUUwsYUFBUixDQUF4QixHQUNiQSxhQURhLEdBQ0dELEtBRHBCO0FBRUFMLElBQUFBLE1BQU0sQ0FBQ0ksQ0FBRCxDQUFOLEdBQVlJLFFBQVo7QUFDRCxHQU5EO0FBT0EsU0FBT1IsTUFBUDtBQUNELENBVkQ7O2VBWWdCWSxVQUFELElBQWdCO0FBQzdCLFFBQU1DLFdBQVcsR0FBR0MsaUJBQVFDLEdBQVIsRUFBcEI7O0FBRUEsUUFBTUMsTUFBTSxHQUFHQyxjQUFLQyxPQUFMLENBQWFOLFVBQWIsQ0FBZjs7QUFDQSxRQUFNTyxZQUFZLEdBQUdGLGNBQUtHLE9BQUwsQ0FBYVAsV0FBYixFQUEwQixjQUExQixFQUEwQ0QsVUFBMUMsQ0FBckI7O0FBQ0EsUUFBTVMsSUFBSSxHQUFHQyxZQUFHQyxZQUFILENBQWdCSixZQUFoQixFQUE4QixPQUE5QixDQUFiOztBQUVBLFFBQU1LLFlBQVksR0FBRztBQUNuQixhQUFTQyxJQUFJLENBQUNDLEtBREs7QUFFbkIsWUFBUUMsZ0JBQUtDLFFBRk07QUFHbkIsWUFBUUMsYUFBSUg7QUFITyxHQUFyQjtBQUtBLFFBQU1BLEtBQUssR0FBR0YsWUFBWSxDQUFDUixNQUFELENBQTFCO0FBRUEsUUFBTWMsTUFBTSxHQUFHZCxNQUFNLEtBQUssTUFBWCxHQUFvQmpCLGNBQWMsQ0FBQzJCLEtBQUssQ0FBQ0wsSUFBRCxDQUFOLENBQWxDLEdBQWtESyxLQUFLLENBQUNMLElBQUQsQ0FBdEU7QUFDQSxTQUFPUyxNQUFQO0FBQ0QsQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHByb2Nlc3MgZnJvbSAncHJvY2Vzcyc7XG5pbXBvcnQgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IHlhbWwgZnJvbSAnanMteWFtbCc7XG5pbXBvcnQgaW5pIGZyb20gJ2luaSc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG5jb25zdCBjaGFuZ2VTdHJJbkluaSA9IChvYmplY3QpID0+IHtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG4gIGtleXMubWFwKChrKSA9PiB7XG4gICAgY29uc3QgdmFsdWUgPSBvYmplY3Rba107XG4gICAgY29uc3QgdmFsdWVGb3JDaGVjayA9IE51bWJlcih2YWx1ZSk7XG4gICAgY29uc3QgbmV3VmFsdWUgPSAhXy5pc0Jvb2xlYW4odmFsdWUpICYmICFfLmlzTmFOKHZhbHVlRm9yQ2hlY2spXG4gICAgICA/IHZhbHVlRm9yQ2hlY2sgOiB2YWx1ZTtcbiAgICBvYmplY3Rba10gPSBuZXdWYWx1ZTtcbiAgfSlcbiAgcmV0dXJuIG9iamVjdDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IChwYXRoVG9GaWxlKSA9PiB7XG4gIGNvbnN0IHJlbGF0aXZQYXRoID0gcHJvY2Vzcy5jd2QoKTtcblxuICBjb25zdCBmb3JtYXQgPSBwYXRoLmV4dG5hbWUocGF0aFRvRmlsZSk7XG4gIGNvbnN0IGFic29sdXRlUGF0aCA9IHBhdGgucmVzb2x2ZShyZWxhdGl2UGF0aCwgJ19fZml4dHVyZXNfXycsIHBhdGhUb0ZpbGUpO1xuICBjb25zdCBkYXRhID0gZnMucmVhZEZpbGVTeW5jKGFic29sdXRlUGF0aCwgJ3V0Zi04Jyk7XG5cbiAgY29uc3QgY2hvb3NlUGFyc2VyID0ge1xuICAgICcuanNvbic6IEpTT04ucGFyc2UsXG4gICAgJy55bWwnOiB5YW1sLnNhZmVMb2FkLFxuICAgICcuaW5pJzogaW5pLnBhcnNlLFxuICB9O1xuICBjb25zdCBwYXJzZSA9IGNob29zZVBhcnNlcltmb3JtYXRdO1xuXG4gIGNvbnN0IHJlc3VsdCA9IGZvcm1hdCA9PT0gJy5pbmknID8gY2hhbmdlU3RySW5JbmkocGFyc2UoZGF0YSkpIDogcGFyc2UoZGF0YSk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIl19