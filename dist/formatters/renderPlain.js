"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const makeLine = (status, ancestors, value1, value2) => {
  const property = ancestors.join('.');
  const newValue1 = _lodash.default.isString(value1) && value1 !== '[complex value]' ? `'${value1}'` : value1;
  const newValue2 = _lodash.default.isString(value2) && value2 !== '[complex value]' ? `'${value2}'` : value2;
  const chooseRow = {
    changed: `Property '${property}' was changed from ${newValue1} to ${newValue2}`,
    added: `Property '${property}' was added with value: ${newValue1}`,
    deleted: `Property '${property}' was deleted`
  };
  const line = chooseRow[status];
  return line;
};

const renderPlain = (ast, ancestors = [], accR = '') => {
  const result = ast.reduce((acc, {
    status,
    key,
    value,
    value2,
    children
  }) => {
    const newAncestors = [...ancestors, key];

    if (children) {
      return renderPlain(children, newAncestors, acc);
    }

    const newValue = _lodash.default.isObject(value) ? '[complex value]' : value;
    const newValue2 = _lodash.default.isObject(value2) ? '[complex value]' : value2;

    if (status === 'unchanged') {
      return acc;
    }

    const newLine = makeLine(status, newAncestors, newValue, newValue2);
    return `${acc}\n${newLine}`;
  }, accR);
  return result.trim();
};

var _default = renderPlain;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mb3JtYXR0ZXJzL3JlbmRlclBsYWluLmpzIl0sIm5hbWVzIjpbIm1ha2VMaW5lIiwic3RhdHVzIiwiYW5jZXN0b3JzIiwidmFsdWUxIiwidmFsdWUyIiwicHJvcGVydHkiLCJqb2luIiwibmV3VmFsdWUxIiwiXyIsImlzU3RyaW5nIiwibmV3VmFsdWUyIiwiY2hvb3NlUm93IiwiY2hhbmdlZCIsImFkZGVkIiwiZGVsZXRlZCIsImxpbmUiLCJyZW5kZXJQbGFpbiIsImFzdCIsImFjY1IiLCJyZXN1bHQiLCJyZWR1Y2UiLCJhY2MiLCJrZXkiLCJ2YWx1ZSIsImNoaWxkcmVuIiwibmV3QW5jZXN0b3JzIiwibmV3VmFsdWUiLCJpc09iamVjdCIsIm5ld0xpbmUiLCJ0cmltIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7Ozs7QUFFQSxNQUFNQSxRQUFRLEdBQUcsQ0FBQ0MsTUFBRCxFQUFTQyxTQUFULEVBQW9CQyxNQUFwQixFQUE0QkMsTUFBNUIsS0FBdUM7QUFDcEQsUUFBTUMsUUFBUSxHQUFHSCxTQUFTLENBQUNJLElBQVYsQ0FBZSxHQUFmLENBQWpCO0FBRUEsUUFBTUMsU0FBUyxHQUFHQyxnQkFBRUMsUUFBRixDQUFXTixNQUFYLEtBQXNCQSxNQUFNLEtBQUssaUJBQWpDLEdBQXNELElBQUdBLE1BQU8sR0FBaEUsR0FBcUVBLE1BQXZGO0FBQ0EsUUFBTU8sU0FBUyxHQUFHRixnQkFBRUMsUUFBRixDQUFXTCxNQUFYLEtBQXNCQSxNQUFNLEtBQUssaUJBQWpDLEdBQXNELElBQUdBLE1BQU8sR0FBaEUsR0FBcUVBLE1BQXZGO0FBRUEsUUFBTU8sU0FBUyxHQUFHO0FBQ2RDLElBQUFBLE9BQU8sRUFBRyxhQUFZUCxRQUFTLHNCQUFxQkUsU0FBVSxPQUFNRyxTQUFVLEVBRGhFO0FBRWRHLElBQUFBLEtBQUssRUFBRyxhQUFZUixRQUFTLDJCQUEwQkUsU0FBVSxFQUZuRDtBQUdkTyxJQUFBQSxPQUFPLEVBQUcsYUFBWVQsUUFBUztBQUhqQixHQUFsQjtBQUtBLFFBQU1VLElBQUksR0FBR0osU0FBUyxDQUFDVixNQUFELENBQXRCO0FBQ0EsU0FBT2MsSUFBUDtBQUNILENBYkQ7O0FBZUEsTUFBTUMsV0FBVyxHQUFHLENBQUNDLEdBQUQsRUFBTWYsU0FBUyxHQUFHLEVBQWxCLEVBQXNCZ0IsSUFBSSxHQUFHLEVBQTdCLEtBQW9DO0FBQ3BELFFBQU1DLE1BQU0sR0FBR0YsR0FBRyxDQUFDRyxNQUFKLENBQVcsQ0FBQ0MsR0FBRCxFQUFNO0FBQUVwQixJQUFBQSxNQUFGO0FBQVVxQixJQUFBQSxHQUFWO0FBQWVDLElBQUFBLEtBQWY7QUFBc0JuQixJQUFBQSxNQUF0QjtBQUE4Qm9CLElBQUFBO0FBQTlCLEdBQU4sS0FBbUQ7QUFDekUsVUFBTUMsWUFBWSxHQUFHLENBQUMsR0FBR3ZCLFNBQUosRUFBZW9CLEdBQWYsQ0FBckI7O0FBQ0EsUUFBSUUsUUFBSixFQUFjO0FBQ1YsYUFBT1IsV0FBVyxDQUFDUSxRQUFELEVBQVdDLFlBQVgsRUFBeUJKLEdBQXpCLENBQWxCO0FBQ0g7O0FBRUQsVUFBTUssUUFBUSxHQUFHbEIsZ0JBQUVtQixRQUFGLENBQVdKLEtBQVgsSUFBb0IsaUJBQXBCLEdBQXdDQSxLQUF6RDtBQUNBLFVBQU1iLFNBQVMsR0FBR0YsZ0JBQUVtQixRQUFGLENBQVd2QixNQUFYLElBQXFCLGlCQUFyQixHQUF5Q0EsTUFBM0Q7O0FBRUEsUUFBSUgsTUFBTSxLQUFLLFdBQWYsRUFBNEI7QUFDeEIsYUFBT29CLEdBQVA7QUFDSDs7QUFDRCxVQUFNTyxPQUFPLEdBQUc1QixRQUFRLENBQUNDLE1BQUQsRUFBU3dCLFlBQVQsRUFBdUJDLFFBQXZCLEVBQWlDaEIsU0FBakMsQ0FBeEI7QUFDQSxXQUFRLEdBQUVXLEdBQUksS0FBSU8sT0FBUSxFQUExQjtBQUNILEdBZGMsRUFjWlYsSUFkWSxDQUFmO0FBZUEsU0FBT0MsTUFBTSxDQUFDVSxJQUFQLEVBQVA7QUFDSCxDQWpCRDs7ZUFtQmViLFciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG5jb25zdCBtYWtlTGluZSA9IChzdGF0dXMsIGFuY2VzdG9ycywgdmFsdWUxLCB2YWx1ZTIpID0+IHtcbiAgICBjb25zdCBwcm9wZXJ0eSA9IGFuY2VzdG9ycy5qb2luKCcuJyk7XG5cbiAgICBjb25zdCBuZXdWYWx1ZTEgPSBfLmlzU3RyaW5nKHZhbHVlMSkgJiYgdmFsdWUxICE9PSAnW2NvbXBsZXggdmFsdWVdJyA/IGAnJHt2YWx1ZTF9J2AgOiB2YWx1ZTE7XG4gICAgY29uc3QgbmV3VmFsdWUyID0gXy5pc1N0cmluZyh2YWx1ZTIpICYmIHZhbHVlMiAhPT0gJ1tjb21wbGV4IHZhbHVlXScgPyBgJyR7dmFsdWUyfSdgIDogdmFsdWUyO1xuXG4gICAgY29uc3QgY2hvb3NlUm93ID0ge1xuICAgICAgICBjaGFuZ2VkOiBgUHJvcGVydHkgJyR7cHJvcGVydHl9JyB3YXMgY2hhbmdlZCBmcm9tICR7bmV3VmFsdWUxfSB0byAke25ld1ZhbHVlMn1gLFxuICAgICAgICBhZGRlZDogYFByb3BlcnR5ICcke3Byb3BlcnR5fScgd2FzIGFkZGVkIHdpdGggdmFsdWU6ICR7bmV3VmFsdWUxfWAsXG4gICAgICAgIGRlbGV0ZWQ6IGBQcm9wZXJ0eSAnJHtwcm9wZXJ0eX0nIHdhcyBkZWxldGVkYCxcbiAgICB9XG4gICAgY29uc3QgbGluZSA9IGNob29zZVJvd1tzdGF0dXNdO1xuICAgIHJldHVybiBsaW5lO1xufTtcblxuY29uc3QgcmVuZGVyUGxhaW4gPSAoYXN0LCBhbmNlc3RvcnMgPSBbXSwgYWNjUiA9ICcnKSA9PiB7XG4gICAgY29uc3QgcmVzdWx0ID0gYXN0LnJlZHVjZSgoYWNjLCB7IHN0YXR1cywga2V5LCB2YWx1ZSwgdmFsdWUyLCBjaGlsZHJlbiB9KSA9PiB7XG4gICAgICAgIGNvbnN0IG5ld0FuY2VzdG9ycyA9IFsuLi5hbmNlc3RvcnMsIGtleV07XG4gICAgICAgIGlmIChjaGlsZHJlbikge1xuICAgICAgICAgICAgcmV0dXJuIHJlbmRlclBsYWluKGNoaWxkcmVuLCBuZXdBbmNlc3RvcnMsIGFjYyk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IF8uaXNPYmplY3QodmFsdWUpID8gJ1tjb21wbGV4IHZhbHVlXScgOiB2YWx1ZTtcbiAgICAgICAgY29uc3QgbmV3VmFsdWUyID0gXy5pc09iamVjdCh2YWx1ZTIpID8gJ1tjb21wbGV4IHZhbHVlXScgOiB2YWx1ZTI7XG5cbiAgICAgICAgaWYgKHN0YXR1cyA9PT0gJ3VuY2hhbmdlZCcpIHtcbiAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbmV3TGluZSA9IG1ha2VMaW5lKHN0YXR1cywgbmV3QW5jZXN0b3JzLCBuZXdWYWx1ZSwgbmV3VmFsdWUyKTtcbiAgICAgICAgcmV0dXJuIGAke2FjY31cXG4ke25ld0xpbmV9YDtcbiAgICB9LCBhY2NSKTtcbiAgICByZXR1cm4gcmVzdWx0LnRyaW0oKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHJlbmRlclBsYWluO1xuIl19