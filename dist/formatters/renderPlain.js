"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const formationOfLines = (status, ancestors, value1, value2) => {
  const property = ancestors.join('.');
  const newValue1 = _lodash.default.isString(value1) && value1 !== '[complex value]' ? `'${value1}'` : value1;
  const newValue2 = _lodash.default.isString(value2) && value2 !== '[complex value]' ? `'${value2}'` : value2;
  const chooseRow = {
    changed: `Property '${property}' was changed from ${newValue1} to ${newValue2}`,
    added: `Property '${property}' was added with value: ${newValue1}`,
    deleted: `Property '${property}' was deleted`
  };
  const line = chooseRow[status];
  return line;
};

const renderPlain = (ast, ancestors = [], accR = '') => {
  const result = ast.reduce((acc, {
    status,
    key,
    value,
    value2,
    children
  }) => {
    const newAncestors = [...ancestors, key];

    if (children) {
      return renderPlain(children, newAncestors, acc);
    }

    const newValue = _lodash.default.isObject(value) ? '[complex value]' : value;
    const newValue2 = _lodash.default.isObject(value2) ? '[complex value]' : value2;

    if (status === 'unchanged') {
      return acc;
    }

    const newLine = formationOfLines(status, newAncestors, newValue, newValue2);
    return `${acc}\n${newLine}`;
  }, accR);
  return result.trim();
};

var _default = renderPlain;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mb3JtYXR0ZXJzL3JlbmRlclBsYWluLmpzIl0sIm5hbWVzIjpbImZvcm1hdGlvbk9mTGluZXMiLCJzdGF0dXMiLCJhbmNlc3RvcnMiLCJ2YWx1ZTEiLCJ2YWx1ZTIiLCJwcm9wZXJ0eSIsImpvaW4iLCJuZXdWYWx1ZTEiLCJfIiwiaXNTdHJpbmciLCJuZXdWYWx1ZTIiLCJjaG9vc2VSb3ciLCJjaGFuZ2VkIiwiYWRkZWQiLCJkZWxldGVkIiwibGluZSIsInJlbmRlclBsYWluIiwiYXN0IiwiYWNjUiIsInJlc3VsdCIsInJlZHVjZSIsImFjYyIsImtleSIsInZhbHVlIiwiY2hpbGRyZW4iLCJuZXdBbmNlc3RvcnMiLCJuZXdWYWx1ZSIsImlzT2JqZWN0IiwibmV3TGluZSIsInRyaW0iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7OztBQUVBLE1BQU1BLGdCQUFnQixHQUFHLENBQUNDLE1BQUQsRUFBU0MsU0FBVCxFQUFvQkMsTUFBcEIsRUFBNEJDLE1BQTVCLEtBQXVDO0FBQzVELFFBQU1DLFFBQVEsR0FBR0gsU0FBUyxDQUFDSSxJQUFWLENBQWUsR0FBZixDQUFqQjtBQUVBLFFBQU1DLFNBQVMsR0FBR0MsZ0JBQUVDLFFBQUYsQ0FBV04sTUFBWCxLQUFzQkEsTUFBTSxLQUFLLGlCQUFqQyxHQUFzRCxJQUFHQSxNQUFPLEdBQWhFLEdBQXFFQSxNQUF2RjtBQUNBLFFBQU1PLFNBQVMsR0FBR0YsZ0JBQUVDLFFBQUYsQ0FBV0wsTUFBWCxLQUFzQkEsTUFBTSxLQUFLLGlCQUFqQyxHQUFzRCxJQUFHQSxNQUFPLEdBQWhFLEdBQXFFQSxNQUF2RjtBQUVBLFFBQU1PLFNBQVMsR0FBRztBQUNkQyxJQUFBQSxPQUFPLEVBQUcsYUFBWVAsUUFBUyxzQkFBcUJFLFNBQVUsT0FBTUcsU0FBVSxFQURoRTtBQUVkRyxJQUFBQSxLQUFLLEVBQUcsYUFBWVIsUUFBUywyQkFBMEJFLFNBQVUsRUFGbkQ7QUFHZE8sSUFBQUEsT0FBTyxFQUFHLGFBQVlULFFBQVM7QUFIakIsR0FBbEI7QUFLQSxRQUFNVSxJQUFJLEdBQUdKLFNBQVMsQ0FBQ1YsTUFBRCxDQUF0QjtBQUNBLFNBQU9jLElBQVA7QUFDSCxDQWJEOztBQWVBLE1BQU1DLFdBQVcsR0FBRyxDQUFDQyxHQUFELEVBQU1mLFNBQVMsR0FBRyxFQUFsQixFQUFzQmdCLElBQUksR0FBRyxFQUE3QixLQUFvQztBQUNwRCxRQUFNQyxNQUFNLEdBQUdGLEdBQUcsQ0FBQ0csTUFBSixDQUFXLENBQUNDLEdBQUQsRUFBTTtBQUFFcEIsSUFBQUEsTUFBRjtBQUFVcUIsSUFBQUEsR0FBVjtBQUFlQyxJQUFBQSxLQUFmO0FBQXNCbkIsSUFBQUEsTUFBdEI7QUFBOEJvQixJQUFBQTtBQUE5QixHQUFOLEtBQW1EO0FBQ3pFLFVBQU1DLFlBQVksR0FBRyxDQUFDLEdBQUd2QixTQUFKLEVBQWVvQixHQUFmLENBQXJCOztBQUNBLFFBQUlFLFFBQUosRUFBYztBQUNWLGFBQU9SLFdBQVcsQ0FBQ1EsUUFBRCxFQUFXQyxZQUFYLEVBQXlCSixHQUF6QixDQUFsQjtBQUNIOztBQUVELFVBQU1LLFFBQVEsR0FBR2xCLGdCQUFFbUIsUUFBRixDQUFXSixLQUFYLElBQW9CLGlCQUFwQixHQUF3Q0EsS0FBekQ7QUFDQSxVQUFNYixTQUFTLEdBQUdGLGdCQUFFbUIsUUFBRixDQUFXdkIsTUFBWCxJQUFxQixpQkFBckIsR0FBeUNBLE1BQTNEOztBQUVBLFFBQUlILE1BQU0sS0FBSyxXQUFmLEVBQTRCO0FBQ3hCLGFBQU9vQixHQUFQO0FBQ0g7O0FBQ0QsVUFBTU8sT0FBTyxHQUFHNUIsZ0JBQWdCLENBQUNDLE1BQUQsRUFBU3dCLFlBQVQsRUFBdUJDLFFBQXZCLEVBQWlDaEIsU0FBakMsQ0FBaEM7QUFDQSxXQUFRLEdBQUVXLEdBQUksS0FBSU8sT0FBUSxFQUExQjtBQUNILEdBZGMsRUFjWlYsSUFkWSxDQUFmO0FBZUEsU0FBT0MsTUFBTSxDQUFDVSxJQUFQLEVBQVA7QUFDSCxDQWpCRDs7ZUFtQmViLFciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG5jb25zdCBmb3JtYXRpb25PZkxpbmVzID0gKHN0YXR1cywgYW5jZXN0b3JzLCB2YWx1ZTEsIHZhbHVlMikgPT4ge1xuICAgIGNvbnN0IHByb3BlcnR5ID0gYW5jZXN0b3JzLmpvaW4oJy4nKTtcblxuICAgIGNvbnN0IG5ld1ZhbHVlMSA9IF8uaXNTdHJpbmcodmFsdWUxKSAmJiB2YWx1ZTEgIT09ICdbY29tcGxleCB2YWx1ZV0nID8gYCcke3ZhbHVlMX0nYCA6IHZhbHVlMTtcbiAgICBjb25zdCBuZXdWYWx1ZTIgPSBfLmlzU3RyaW5nKHZhbHVlMikgJiYgdmFsdWUyICE9PSAnW2NvbXBsZXggdmFsdWVdJyA/IGAnJHt2YWx1ZTJ9J2AgOiB2YWx1ZTI7XG5cbiAgICBjb25zdCBjaG9vc2VSb3cgPSB7XG4gICAgICAgIGNoYW5nZWQ6IGBQcm9wZXJ0eSAnJHtwcm9wZXJ0eX0nIHdhcyBjaGFuZ2VkIGZyb20gJHtuZXdWYWx1ZTF9IHRvICR7bmV3VmFsdWUyfWAsXG4gICAgICAgIGFkZGVkOiBgUHJvcGVydHkgJyR7cHJvcGVydHl9JyB3YXMgYWRkZWQgd2l0aCB2YWx1ZTogJHtuZXdWYWx1ZTF9YCxcbiAgICAgICAgZGVsZXRlZDogYFByb3BlcnR5ICcke3Byb3BlcnR5fScgd2FzIGRlbGV0ZWRgLFxuICAgIH1cbiAgICBjb25zdCBsaW5lID0gY2hvb3NlUm93W3N0YXR1c107XG4gICAgcmV0dXJuIGxpbmU7XG59O1xuXG5jb25zdCByZW5kZXJQbGFpbiA9IChhc3QsIGFuY2VzdG9ycyA9IFtdLCBhY2NSID0gJycpID0+IHtcbiAgICBjb25zdCByZXN1bHQgPSBhc3QucmVkdWNlKChhY2MsIHsgc3RhdHVzLCBrZXksIHZhbHVlLCB2YWx1ZTIsIGNoaWxkcmVuIH0pID0+IHtcbiAgICAgICAgY29uc3QgbmV3QW5jZXN0b3JzID0gWy4uLmFuY2VzdG9ycywga2V5XTtcbiAgICAgICAgaWYgKGNoaWxkcmVuKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVuZGVyUGxhaW4oY2hpbGRyZW4sIG5ld0FuY2VzdG9ycywgYWNjKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG5ld1ZhbHVlID0gXy5pc09iamVjdCh2YWx1ZSkgPyAnW2NvbXBsZXggdmFsdWVdJyA6IHZhbHVlO1xuICAgICAgICBjb25zdCBuZXdWYWx1ZTIgPSBfLmlzT2JqZWN0KHZhbHVlMikgPyAnW2NvbXBsZXggdmFsdWVdJyA6IHZhbHVlMjtcblxuICAgICAgICBpZiAoc3RhdHVzID09PSAndW5jaGFuZ2VkJykge1xuICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXdMaW5lID0gZm9ybWF0aW9uT2ZMaW5lcyhzdGF0dXMsIG5ld0FuY2VzdG9ycywgbmV3VmFsdWUsIG5ld1ZhbHVlMik7XG4gICAgICAgIHJldHVybiBgJHthY2N9XFxuJHtuZXdMaW5lfWA7XG4gICAgfSwgYWNjUik7XG4gICAgcmV0dXJuIHJlc3VsdC50cmltKCk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCByZW5kZXJQbGFpbjtcbiJdfQ==