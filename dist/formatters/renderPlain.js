"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const formationOfLines = (status, ancestors, value1, value2) => {
  const property = ancestors.join('.');
  const newValue1 = _lodash.default.isString(value1) && value1 !== '[complex value]' ? `'${value1}'` : value1;
  const newValue2 = _lodash.default.isString(value2) && value2 !== '[complex value]' ? `'${value2}'` : value2;
  const chooseRow = {
    changed: `Property '${property}' was changed from ${newValue1} to ${newValue2}`,
    added: `Property '${property}' was added with value: ${newValue1}`,
    deleted: `Property '${property}' was deleted`
  };
  const line = chooseRow[status] || '';
  return line;
};

const renderPlain = (ast, ancestors = [], accR = '') => {
  const result = ast.reduce((acc, {
    status,
    key,
    value,
    value2,
    children
  }) => {
    const newAncestors = [...ancestors, key];

    if (children) {
      return renderPlain(children, newAncestors, acc);
    }

    const newValue = _lodash.default.isObject(value) ? '[complex value]' : value;
    const newValue2 = _lodash.default.isObject(value2) ? '[complex value]' : value2;

    if (status === 'unchanged') {
      return acc;
    }

    const newLine = formationOfLines(status, newAncestors, newValue, newValue2);
    return `${acc}\n${newLine}`;
  }, accR);
  return result.trim();
};

var _default = renderPlain;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mb3JtYXR0ZXJzL3JlbmRlclBsYWluLmpzIl0sIm5hbWVzIjpbImZvcm1hdGlvbk9mTGluZXMiLCJzdGF0dXMiLCJhbmNlc3RvcnMiLCJ2YWx1ZTEiLCJ2YWx1ZTIiLCJwcm9wZXJ0eSIsImpvaW4iLCJuZXdWYWx1ZTEiLCJfIiwiaXNTdHJpbmciLCJuZXdWYWx1ZTIiLCJjaG9vc2VSb3ciLCJjaGFuZ2VkIiwiYWRkZWQiLCJkZWxldGVkIiwibGluZSIsInJlbmRlclBsYWluIiwiYXN0IiwiYWNjUiIsInJlc3VsdCIsInJlZHVjZSIsImFjYyIsImtleSIsInZhbHVlIiwiY2hpbGRyZW4iLCJuZXdBbmNlc3RvcnMiLCJuZXdWYWx1ZSIsImlzT2JqZWN0IiwibmV3TGluZSIsInRyaW0iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7OztBQUVBLE1BQU1BLGdCQUFnQixHQUFHLENBQUNDLE1BQUQsRUFBU0MsU0FBVCxFQUFvQkMsTUFBcEIsRUFBNEJDLE1BQTVCLEtBQXVDO0FBQzVELFFBQU1DLFFBQVEsR0FBR0gsU0FBUyxDQUFDSSxJQUFWLENBQWUsR0FBZixDQUFqQjtBQUVBLFFBQU1DLFNBQVMsR0FBR0MsZ0JBQUVDLFFBQUYsQ0FBV04sTUFBWCxLQUFzQkEsTUFBTSxLQUFLLGlCQUFqQyxHQUFzRCxJQUFHQSxNQUFPLEdBQWhFLEdBQXFFQSxNQUF2RjtBQUNBLFFBQU1PLFNBQVMsR0FBR0YsZ0JBQUVDLFFBQUYsQ0FBV0wsTUFBWCxLQUFzQkEsTUFBTSxLQUFLLGlCQUFqQyxHQUFzRCxJQUFHQSxNQUFPLEdBQWhFLEdBQXFFQSxNQUF2RjtBQUVBLFFBQU1PLFNBQVMsR0FBRztBQUNkQyxJQUFBQSxPQUFPLEVBQUcsYUFBWVAsUUFBUyxzQkFBcUJFLFNBQVUsT0FBTUcsU0FBVSxFQURoRTtBQUVkRyxJQUFBQSxLQUFLLEVBQUcsYUFBWVIsUUFBUywyQkFBMEJFLFNBQVUsRUFGbkQ7QUFHZE8sSUFBQUEsT0FBTyxFQUFHLGFBQVlULFFBQVM7QUFIakIsR0FBbEI7QUFLQSxRQUFNVSxJQUFJLEdBQUdKLFNBQVMsQ0FBQ1YsTUFBRCxDQUFULElBQXFCLEVBQWxDO0FBQ0EsU0FBT2MsSUFBUDtBQUNILENBYkQ7O0FBZUEsTUFBTUMsV0FBVyxHQUFHLENBQUNDLEdBQUQsRUFBTWYsU0FBUyxHQUFHLEVBQWxCLEVBQXNCZ0IsSUFBSSxHQUFHLEVBQTdCLEtBQW9DO0FBQ3BELFFBQU1DLE1BQU0sR0FBR0YsR0FBRyxDQUFDRyxNQUFKLENBQVcsQ0FBQ0MsR0FBRCxFQUFNO0FBQUVwQixJQUFBQSxNQUFGO0FBQVVxQixJQUFBQSxHQUFWO0FBQWVDLElBQUFBLEtBQWY7QUFBc0JuQixJQUFBQSxNQUF0QjtBQUE4Qm9CLElBQUFBO0FBQTlCLEdBQU4sS0FBbUQ7QUFDekUsVUFBTUMsWUFBWSxHQUFHLENBQUMsR0FBR3ZCLFNBQUosRUFBZW9CLEdBQWYsQ0FBckI7O0FBQ0EsUUFBSUUsUUFBSixFQUFjO0FBQ1YsYUFBT1IsV0FBVyxDQUFDUSxRQUFELEVBQVdDLFlBQVgsRUFBeUJKLEdBQXpCLENBQWxCO0FBQ0g7O0FBRUQsVUFBTUssUUFBUSxHQUFHbEIsZ0JBQUVtQixRQUFGLENBQVdKLEtBQVgsSUFBb0IsaUJBQXBCLEdBQXdDQSxLQUF6RDtBQUNBLFVBQU1iLFNBQVMsR0FBR0YsZ0JBQUVtQixRQUFGLENBQVd2QixNQUFYLElBQXFCLGlCQUFyQixHQUF5Q0EsTUFBM0Q7O0FBRUEsUUFBSUgsTUFBTSxLQUFLLFdBQWYsRUFBNEI7QUFDeEIsYUFBT29CLEdBQVA7QUFDSDs7QUFDRCxVQUFNTyxPQUFPLEdBQUc1QixnQkFBZ0IsQ0FBQ0MsTUFBRCxFQUFTd0IsWUFBVCxFQUF1QkMsUUFBdkIsRUFBaUNoQixTQUFqQyxDQUFoQztBQUNBLFdBQVEsR0FBRVcsR0FBSSxLQUFJTyxPQUFRLEVBQTFCO0FBQ0gsR0FkYyxFQWNaVixJQWRZLENBQWY7QUFlQSxTQUFPQyxNQUFNLENBQUNVLElBQVAsRUFBUDtBQUNILENBakJEOztlQW1CZWIsVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cbmNvbnN0IGZvcm1hdGlvbk9mTGluZXMgPSAoc3RhdHVzLCBhbmNlc3RvcnMsIHZhbHVlMSwgdmFsdWUyKSA9PiB7XG4gICAgY29uc3QgcHJvcGVydHkgPSBhbmNlc3RvcnMuam9pbignLicpO1xuXG4gICAgY29uc3QgbmV3VmFsdWUxID0gXy5pc1N0cmluZyh2YWx1ZTEpICYmIHZhbHVlMSAhPT0gJ1tjb21wbGV4IHZhbHVlXScgPyBgJyR7dmFsdWUxfSdgIDogdmFsdWUxO1xuICAgIGNvbnN0IG5ld1ZhbHVlMiA9IF8uaXNTdHJpbmcodmFsdWUyKSAmJiB2YWx1ZTIgIT09ICdbY29tcGxleCB2YWx1ZV0nID8gYCcke3ZhbHVlMn0nYCA6IHZhbHVlMjtcblxuICAgIGNvbnN0IGNob29zZVJvdyA9IHtcbiAgICAgICAgY2hhbmdlZDogYFByb3BlcnR5ICcke3Byb3BlcnR5fScgd2FzIGNoYW5nZWQgZnJvbSAke25ld1ZhbHVlMX0gdG8gJHtuZXdWYWx1ZTJ9YCxcbiAgICAgICAgYWRkZWQ6IGBQcm9wZXJ0eSAnJHtwcm9wZXJ0eX0nIHdhcyBhZGRlZCB3aXRoIHZhbHVlOiAke25ld1ZhbHVlMX1gLFxuICAgICAgICBkZWxldGVkOiBgUHJvcGVydHkgJyR7cHJvcGVydHl9JyB3YXMgZGVsZXRlZGAsXG4gICAgfVxuICAgIGNvbnN0IGxpbmUgPSBjaG9vc2VSb3dbc3RhdHVzXSB8fCAnJztcbiAgICByZXR1cm4gbGluZTtcbn07XG5cbmNvbnN0IHJlbmRlclBsYWluID0gKGFzdCwgYW5jZXN0b3JzID0gW10sIGFjY1IgPSAnJykgPT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IGFzdC5yZWR1Y2UoKGFjYywgeyBzdGF0dXMsIGtleSwgdmFsdWUsIHZhbHVlMiwgY2hpbGRyZW4gfSkgPT4ge1xuICAgICAgICBjb25zdCBuZXdBbmNlc3RvcnMgPSBbLi4uYW5jZXN0b3JzLCBrZXldO1xuICAgICAgICBpZiAoY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIHJldHVybiByZW5kZXJQbGFpbihjaGlsZHJlbiwgbmV3QW5jZXN0b3JzLCBhY2MpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbmV3VmFsdWUgPSBfLmlzT2JqZWN0KHZhbHVlKSA/ICdbY29tcGxleCB2YWx1ZV0nIDogdmFsdWU7XG4gICAgICAgIGNvbnN0IG5ld1ZhbHVlMiA9IF8uaXNPYmplY3QodmFsdWUyKSA/ICdbY29tcGxleCB2YWx1ZV0nIDogdmFsdWUyO1xuXG4gICAgICAgIGlmIChzdGF0dXMgPT09ICd1bmNoYW5nZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5ld0xpbmUgPSBmb3JtYXRpb25PZkxpbmVzKHN0YXR1cywgbmV3QW5jZXN0b3JzLCBuZXdWYWx1ZSwgbmV3VmFsdWUyKTtcbiAgICAgICAgcmV0dXJuIGAke2FjY31cXG4ke25ld0xpbmV9YDtcbiAgICB9LCBhY2NSKTtcbiAgICByZXR1cm4gcmVzdWx0LnRyaW0oKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHJlbmRlclBsYWluO1xuIl19