"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const makeValue = value => {
  const newValue = _lodash.default.isObject(value) ? '[complex value]' : value;
  return _lodash.default.isString(newValue) && newValue !== '[complex value]' ? `'${newValue}'` : newValue;
};

const makeLine = (status, ancestors, value1, value2) => {
  const property = ancestors.join('.');
  const chooseRow = {
    changed: `Property '${property}' was changed from ${value1} to ${value2}`,
    added: `Property '${property}' was added with value: ${value1}`,
    deleted: `Property '${property}' was deleted`
  };
  const line = chooseRow[status];
  return line;
};

const renderPlain = (ast, ancestors = [], accR = '') => {
  const result = ast.reduce((acc, {
    status,
    key,
    value,
    value2,
    children
  }) => {
    const newAncestors = [...ancestors, key];

    if (children) {
      return renderPlain(children, newAncestors, acc);
    }

    if (status === 'unchanged') {
      return acc;
    }

    const newLine = makeLine(status, newAncestors, makeValue(value), makeValue(value2));
    return `${acc}\n${newLine}`;
  }, accR);
  return result.trim();
};

var _default = renderPlain;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mb3JtYXR0ZXJzL3JlbmRlclBsYWluLmpzIl0sIm5hbWVzIjpbIm1ha2VWYWx1ZSIsInZhbHVlIiwibmV3VmFsdWUiLCJfIiwiaXNPYmplY3QiLCJpc1N0cmluZyIsIm1ha2VMaW5lIiwic3RhdHVzIiwiYW5jZXN0b3JzIiwidmFsdWUxIiwidmFsdWUyIiwicHJvcGVydHkiLCJqb2luIiwiY2hvb3NlUm93IiwiY2hhbmdlZCIsImFkZGVkIiwiZGVsZXRlZCIsImxpbmUiLCJyZW5kZXJQbGFpbiIsImFzdCIsImFjY1IiLCJyZXN1bHQiLCJyZWR1Y2UiLCJhY2MiLCJrZXkiLCJjaGlsZHJlbiIsIm5ld0FuY2VzdG9ycyIsIm5ld0xpbmUiLCJ0cmltIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7Ozs7QUFFQSxNQUFNQSxTQUFTLEdBQUlDLEtBQUQsSUFBVztBQUN6QixRQUFNQyxRQUFRLEdBQUdDLGdCQUFFQyxRQUFGLENBQVdILEtBQVgsSUFBb0IsaUJBQXBCLEdBQXdDQSxLQUF6RDtBQUNBLFNBQU9FLGdCQUFFRSxRQUFGLENBQVdILFFBQVgsS0FBd0JBLFFBQVEsS0FBSyxpQkFBckMsR0FDQSxJQUFHQSxRQUFTLEdBRFosR0FDaUJBLFFBRHhCO0FBRUgsQ0FKRDs7QUFNQSxNQUFNSSxRQUFRLEdBQUcsQ0FBQ0MsTUFBRCxFQUFTQyxTQUFULEVBQW9CQyxNQUFwQixFQUE0QkMsTUFBNUIsS0FBdUM7QUFDcEQsUUFBTUMsUUFBUSxHQUFHSCxTQUFTLENBQUNJLElBQVYsQ0FBZSxHQUFmLENBQWpCO0FBRUEsUUFBTUMsU0FBUyxHQUFHO0FBQ2RDLElBQUFBLE9BQU8sRUFBRyxhQUFZSCxRQUFTLHNCQUFxQkYsTUFBTyxPQUFNQyxNQUFPLEVBRDFEO0FBRWRLLElBQUFBLEtBQUssRUFBRyxhQUFZSixRQUFTLDJCQUEwQkYsTUFBTyxFQUZoRDtBQUdkTyxJQUFBQSxPQUFPLEVBQUcsYUFBWUwsUUFBUztBQUhqQixHQUFsQjtBQUtBLFFBQU1NLElBQUksR0FBR0osU0FBUyxDQUFDTixNQUFELENBQXRCO0FBQ0EsU0FBT1UsSUFBUDtBQUNILENBVkQ7O0FBWUEsTUFBTUMsV0FBVyxHQUFHLENBQUNDLEdBQUQsRUFBTVgsU0FBUyxHQUFHLEVBQWxCLEVBQXNCWSxJQUFJLEdBQUcsRUFBN0IsS0FBb0M7QUFDcEQsUUFBTUMsTUFBTSxHQUFHRixHQUFHLENBQUNHLE1BQUosQ0FBVyxDQUFDQyxHQUFELEVBQU07QUFBRWhCLElBQUFBLE1BQUY7QUFBVWlCLElBQUFBLEdBQVY7QUFBZXZCLElBQUFBLEtBQWY7QUFBc0JTLElBQUFBLE1BQXRCO0FBQThCZSxJQUFBQTtBQUE5QixHQUFOLEtBQW1EO0FBQ3pFLFVBQU1DLFlBQVksR0FBRyxDQUFDLEdBQUdsQixTQUFKLEVBQWVnQixHQUFmLENBQXJCOztBQUNBLFFBQUlDLFFBQUosRUFBYztBQUNWLGFBQU9QLFdBQVcsQ0FBQ08sUUFBRCxFQUFXQyxZQUFYLEVBQXlCSCxHQUF6QixDQUFsQjtBQUNIOztBQUVELFFBQUloQixNQUFNLEtBQUssV0FBZixFQUE0QjtBQUN4QixhQUFPZ0IsR0FBUDtBQUNIOztBQUNELFVBQU1JLE9BQU8sR0FBR3JCLFFBQVEsQ0FBQ0MsTUFBRCxFQUFTbUIsWUFBVCxFQUF1QjFCLFNBQVMsQ0FBQ0MsS0FBRCxDQUFoQyxFQUF5Q0QsU0FBUyxDQUFDVSxNQUFELENBQWxELENBQXhCO0FBQ0EsV0FBUSxHQUFFYSxHQUFJLEtBQUlJLE9BQVEsRUFBMUI7QUFDSCxHQVhjLEVBV1pQLElBWFksQ0FBZjtBQVlBLFNBQU9DLE1BQU0sQ0FBQ08sSUFBUCxFQUFQO0FBQ0gsQ0FkRDs7ZUFnQmVWLFciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG5jb25zdCBtYWtlVmFsdWUgPSAodmFsdWUpID0+IHtcbiAgICBjb25zdCBuZXdWYWx1ZSA9IF8uaXNPYmplY3QodmFsdWUpID8gJ1tjb21wbGV4IHZhbHVlXScgOiB2YWx1ZTtcbiAgICByZXR1cm4gXy5pc1N0cmluZyhuZXdWYWx1ZSkgJiYgbmV3VmFsdWUgIT09ICdbY29tcGxleCB2YWx1ZV0nXG4gICAgICAgID8gYCcke25ld1ZhbHVlfSdgIDogbmV3VmFsdWU7XG59O1xuXG5jb25zdCBtYWtlTGluZSA9IChzdGF0dXMsIGFuY2VzdG9ycywgdmFsdWUxLCB2YWx1ZTIpID0+IHtcbiAgICBjb25zdCBwcm9wZXJ0eSA9IGFuY2VzdG9ycy5qb2luKCcuJyk7XG5cbiAgICBjb25zdCBjaG9vc2VSb3cgPSB7XG4gICAgICAgIGNoYW5nZWQ6IGBQcm9wZXJ0eSAnJHtwcm9wZXJ0eX0nIHdhcyBjaGFuZ2VkIGZyb20gJHt2YWx1ZTF9IHRvICR7dmFsdWUyfWAsXG4gICAgICAgIGFkZGVkOiBgUHJvcGVydHkgJyR7cHJvcGVydHl9JyB3YXMgYWRkZWQgd2l0aCB2YWx1ZTogJHt2YWx1ZTF9YCxcbiAgICAgICAgZGVsZXRlZDogYFByb3BlcnR5ICcke3Byb3BlcnR5fScgd2FzIGRlbGV0ZWRgLFxuICAgIH1cbiAgICBjb25zdCBsaW5lID0gY2hvb3NlUm93W3N0YXR1c107XG4gICAgcmV0dXJuIGxpbmU7XG59O1xuXG5jb25zdCByZW5kZXJQbGFpbiA9IChhc3QsIGFuY2VzdG9ycyA9IFtdLCBhY2NSID0gJycpID0+IHtcbiAgICBjb25zdCByZXN1bHQgPSBhc3QucmVkdWNlKChhY2MsIHsgc3RhdHVzLCBrZXksIHZhbHVlLCB2YWx1ZTIsIGNoaWxkcmVuIH0pID0+IHtcbiAgICAgICAgY29uc3QgbmV3QW5jZXN0b3JzID0gWy4uLmFuY2VzdG9ycywga2V5XTtcbiAgICAgICAgaWYgKGNoaWxkcmVuKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVuZGVyUGxhaW4oY2hpbGRyZW4sIG5ld0FuY2VzdG9ycywgYWNjKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdGF0dXMgPT09ICd1bmNoYW5nZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5ld0xpbmUgPSBtYWtlTGluZShzdGF0dXMsIG5ld0FuY2VzdG9ycywgbWFrZVZhbHVlKHZhbHVlKSwgbWFrZVZhbHVlKHZhbHVlMikpO1xuICAgICAgICByZXR1cm4gYCR7YWNjfVxcbiR7bmV3TGluZX1gO1xuICAgIH0sIGFjY1IpO1xuICAgIHJldHVybiByZXN1bHQudHJpbSgpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgcmVuZGVyUGxhaW47XG4iXX0=