"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

var _parsers = _interopRequireDefault(require("./parsers"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const buildAst = (data1, data2) => {
  const keys1 = Object.keys(data1);
  const keys2 = Object.keys(data2);

  const commonKeys = _lodash.default.uniq(keys1.concat(keys2));

  const result = commonKeys.map(key => {
    const value1 = data1[key];
    const value2 = data2[key];

    if (_lodash.default.has(data1, key) && _lodash.default.has(data2, key)) {
      if (typeof value1 === 'object' && typeof value2 === 'object') {
        return {
          status: 'unchanged',
          key,
          children: buildAst(value1, value2)
        };
      }

      if (value1 !== value2) {
        return [{
          status: 'removed',
          key,
          value: value1
        }, {
          status: 'added',
          key,
          value: value2
        }];
      }

      return {
        status: 'unchanged',
        key,
        value: value1
      };
    }

    if (_lodash.default.has(data1, key) && !_lodash.default.has(data2, key)) {
      return {
        status: 'removed',
        key,
        value: value1
      };
    }

    if (!_lodash.default.has(data1, key) && _lodash.default.has(data2, key)) {
      return {
        status: 'added',
        key,
        value: value2
      };
    }
  });
  return _lodash.default.flatten(result);
};

const stringify = (object, gap) => {
  const keys = Object.keys(object);
  const result = keys.reduce((acc, key) => `${acc}${' '.repeat(gap)}${key}: ${object[key]}`, '');
  return `{\n${result}\n${' '.repeat(gap - 4)}}`;
};

const diff = (ast, gap = 0) => {
  const sign = {
    unchanged: '  ',
    added: '+ ',
    removed: '- '
  };
  const result = ast.reduce((acc, {
    status,
    key,
    value,
    children
  }) => {
    if (children) {
      return `${acc}\n${' '.repeat(gap + 2)}${sign[status]}${key}: ${diff(_lodash.default.flatten(children), gap + 4)}`;
    }

    const newValue = typeof value === 'object' ? stringify(value, gap + 8) : value;
    return `${acc}\n${' '.repeat(gap + 2)}${sign[status]}${key}: ${newValue}`;
  }, '');
  return `{${result}\n${' '.repeat(gap)}}`;
};

var _default = (pathToFile1, pathToFile2) => {
  const object1 = (0, _parsers.default)(pathToFile1);
  const object2 = (0, _parsers.default)(pathToFile2); //console.log(keys1, values1);
  //values1.map((v) => console.log(typeof v));

  const dataAst = buildAst(object1, object2);
  return diff(dataAst);
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJidWlsZEFzdCIsImRhdGExIiwiZGF0YTIiLCJrZXlzMSIsIk9iamVjdCIsImtleXMiLCJrZXlzMiIsImNvbW1vbktleXMiLCJfIiwidW5pcSIsImNvbmNhdCIsInJlc3VsdCIsIm1hcCIsImtleSIsInZhbHVlMSIsInZhbHVlMiIsImhhcyIsInN0YXR1cyIsImNoaWxkcmVuIiwidmFsdWUiLCJmbGF0dGVuIiwic3RyaW5naWZ5Iiwib2JqZWN0IiwiZ2FwIiwicmVkdWNlIiwiYWNjIiwicmVwZWF0IiwiZGlmZiIsImFzdCIsInNpZ24iLCJ1bmNoYW5nZWQiLCJhZGRlZCIsInJlbW92ZWQiLCJuZXdWYWx1ZSIsInBhdGhUb0ZpbGUxIiwicGF0aFRvRmlsZTIiLCJvYmplY3QxIiwib2JqZWN0MiIsImRhdGFBc3QiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7OztBQUVBLE1BQU1BLFFBQVEsR0FBRyxDQUFDQyxLQUFELEVBQVFDLEtBQVIsS0FBa0I7QUFFakMsUUFBTUMsS0FBSyxHQUFHQyxNQUFNLENBQUNDLElBQVAsQ0FBWUosS0FBWixDQUFkO0FBQ0EsUUFBTUssS0FBSyxHQUFHRixNQUFNLENBQUNDLElBQVAsQ0FBWUgsS0FBWixDQUFkOztBQUVBLFFBQU1LLFVBQVUsR0FBR0MsZ0JBQUVDLElBQUYsQ0FBT04sS0FBSyxDQUFDTyxNQUFOLENBQWFKLEtBQWIsQ0FBUCxDQUFuQjs7QUFFQSxRQUFNSyxNQUFNLEdBQUdKLFVBQVUsQ0FBQ0ssR0FBWCxDQUFnQkMsR0FBRCxJQUFTO0FBQ3JDLFVBQU1DLE1BQU0sR0FBR2IsS0FBSyxDQUFDWSxHQUFELENBQXBCO0FBQ0EsVUFBTUUsTUFBTSxHQUFHYixLQUFLLENBQUNXLEdBQUQsQ0FBcEI7O0FBQ0EsUUFBSUwsZ0JBQUVRLEdBQUYsQ0FBTWYsS0FBTixFQUFhWSxHQUFiLEtBQXFCTCxnQkFBRVEsR0FBRixDQUFNZCxLQUFOLEVBQWFXLEdBQWIsQ0FBekIsRUFBNEM7QUFDMUMsVUFBSSxPQUFPQyxNQUFQLEtBQWtCLFFBQWxCLElBQThCLE9BQU9DLE1BQVAsS0FBa0IsUUFBcEQsRUFBOEQ7QUFDNUQsZUFBTztBQUFFRSxVQUFBQSxNQUFNLEVBQUUsV0FBVjtBQUF1QkosVUFBQUEsR0FBdkI7QUFBNEJLLFVBQUFBLFFBQVEsRUFBRWxCLFFBQVEsQ0FBQ2MsTUFBRCxFQUFTQyxNQUFUO0FBQTlDLFNBQVA7QUFDRDs7QUFDRCxVQUFJRCxNQUFNLEtBQUtDLE1BQWYsRUFBdUI7QUFDckIsZUFBTyxDQUFDO0FBQUVFLFVBQUFBLE1BQU0sRUFBRSxTQUFWO0FBQXFCSixVQUFBQSxHQUFyQjtBQUEwQk0sVUFBQUEsS0FBSyxFQUFFTDtBQUFqQyxTQUFELEVBQTJDO0FBQUVHLFVBQUFBLE1BQU0sRUFBRSxPQUFWO0FBQW1CSixVQUFBQSxHQUFuQjtBQUF3Qk0sVUFBQUEsS0FBSyxFQUFFSjtBQUEvQixTQUEzQyxDQUFQO0FBQ0Q7O0FBQ0QsYUFBTztBQUFFRSxRQUFBQSxNQUFNLEVBQUUsV0FBVjtBQUF1QkosUUFBQUEsR0FBdkI7QUFBNEJNLFFBQUFBLEtBQUssRUFBRUw7QUFBbkMsT0FBUDtBQUNEOztBQUNELFFBQUlOLGdCQUFFUSxHQUFGLENBQU1mLEtBQU4sRUFBYVksR0FBYixLQUFxQixDQUFDTCxnQkFBRVEsR0FBRixDQUFNZCxLQUFOLEVBQWFXLEdBQWIsQ0FBMUIsRUFBNkM7QUFDM0MsYUFBTztBQUFFSSxRQUFBQSxNQUFNLEVBQUUsU0FBVjtBQUFxQkosUUFBQUEsR0FBckI7QUFBMEJNLFFBQUFBLEtBQUssRUFBRUw7QUFBakMsT0FBUDtBQUNEOztBQUNELFFBQUksQ0FBQ04sZ0JBQUVRLEdBQUYsQ0FBTWYsS0FBTixFQUFhWSxHQUFiLENBQUQsSUFBc0JMLGdCQUFFUSxHQUFGLENBQU1kLEtBQU4sRUFBYVcsR0FBYixDQUExQixFQUE2QztBQUMzQyxhQUFPO0FBQUVJLFFBQUFBLE1BQU0sRUFBRSxPQUFWO0FBQW1CSixRQUFBQSxHQUFuQjtBQUF3Qk0sUUFBQUEsS0FBSyxFQUFFSjtBQUEvQixPQUFQO0FBQ0M7QUFDRixHQWxCWSxDQUFmO0FBbUJBLFNBQU9QLGdCQUFFWSxPQUFGLENBQVVULE1BQVYsQ0FBUDtBQUNELENBM0JEOztBQTZCQSxNQUFNVSxTQUFTLEdBQUcsQ0FBQ0MsTUFBRCxFQUFTQyxHQUFULEtBQWlCO0FBQ2pDLFFBQU1sQixJQUFJLEdBQUdELE1BQU0sQ0FBQ0MsSUFBUCxDQUFZaUIsTUFBWixDQUFiO0FBQ0EsUUFBTVgsTUFBTSxHQUFHTixJQUFJLENBQUNtQixNQUFMLENBQVksQ0FBQ0MsR0FBRCxFQUFNWixHQUFOLEtBQWUsR0FBRVksR0FBSSxHQUFFLElBQUlDLE1BQUosQ0FBV0gsR0FBWCxDQUFnQixHQUFFVixHQUFJLEtBQUlTLE1BQU0sQ0FBQ1QsR0FBRCxDQUFNLEVBQXpFLEVBQTRFLEVBQTVFLENBQWY7QUFDQSxTQUFRLE1BQUtGLE1BQU8sS0FBSSxJQUFJZSxNQUFKLENBQVdILEdBQUcsR0FBRyxDQUFqQixDQUFvQixHQUE1QztBQUNELENBSkQ7O0FBTUEsTUFBTUksSUFBSSxHQUFHLENBQUNDLEdBQUQsRUFBTUwsR0FBRyxHQUFHLENBQVosS0FBa0I7QUFDN0IsUUFBTU0sSUFBSSxHQUFHO0FBQ1hDLElBQUFBLFNBQVMsRUFBRSxJQURBO0FBRVhDLElBQUFBLEtBQUssRUFBRSxJQUZJO0FBR1hDLElBQUFBLE9BQU8sRUFBRTtBQUhFLEdBQWI7QUFLQSxRQUFNckIsTUFBTSxHQUFHaUIsR0FBRyxDQUFDSixNQUFKLENBQVcsQ0FBQ0MsR0FBRCxFQUFNO0FBQUVSLElBQUFBLE1BQUY7QUFBVUosSUFBQUEsR0FBVjtBQUFlTSxJQUFBQSxLQUFmO0FBQXNCRCxJQUFBQTtBQUF0QixHQUFOLEtBQTJDO0FBQ25FLFFBQUlBLFFBQUosRUFBYztBQUNaLGFBQVEsR0FBRU8sR0FBSSxLQUFJLElBQUlDLE1BQUosQ0FBV0gsR0FBRyxHQUFHLENBQWpCLENBQW9CLEdBQUVNLElBQUksQ0FBQ1osTUFBRCxDQUFTLEdBQUVKLEdBQUksS0FBSWMsSUFBSSxDQUFDbkIsZ0JBQUVZLE9BQUYsQ0FBVUYsUUFBVixDQUFELEVBQXNCSyxHQUFHLEdBQUcsQ0FBNUIsQ0FBK0IsRUFBbEc7QUFDRDs7QUFDRCxVQUFNVSxRQUFRLEdBQUcsT0FBT2QsS0FBUCxLQUFpQixRQUFqQixHQUE0QkUsU0FBUyxDQUFDRixLQUFELEVBQVFJLEdBQUcsR0FBRyxDQUFkLENBQXJDLEdBQXdESixLQUF6RTtBQUNBLFdBQVEsR0FBRU0sR0FBSSxLQUFJLElBQUlDLE1BQUosQ0FBV0gsR0FBRyxHQUFHLENBQWpCLENBQW9CLEdBQUVNLElBQUksQ0FBQ1osTUFBRCxDQUFTLEdBQUVKLEdBQUksS0FBSW9CLFFBQVMsRUFBeEU7QUFDRCxHQU5jLEVBTVosRUFOWSxDQUFmO0FBT0EsU0FBUSxJQUFHdEIsTUFBTyxLQUFJLElBQUllLE1BQUosQ0FBV0gsR0FBWCxDQUFnQixHQUF0QztBQUNELENBZEQ7O2VBZ0JlLENBQUNXLFdBQUQsRUFBY0MsV0FBZCxLQUE4QjtBQUMzQyxRQUFNQyxPQUFPLEdBQUcsc0JBQVFGLFdBQVIsQ0FBaEI7QUFDQSxRQUFNRyxPQUFPLEdBQUcsc0JBQVFGLFdBQVIsQ0FBaEIsQ0FGMkMsQ0FHM0M7QUFDQTs7QUFDQSxRQUFNRyxPQUFPLEdBQUd0QyxRQUFRLENBQUNvQyxPQUFELEVBQVVDLE9BQVYsQ0FBeEI7QUFDQSxTQUFPVixJQUFJLENBQUNXLE9BQUQsQ0FBWDtBQUNELEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHBhcnNlcnMgZnJvbSAnLi9wYXJzZXJzJztcblxuY29uc3QgYnVpbGRBc3QgPSAoZGF0YTEsIGRhdGEyKSA9PiB7XG5cbiAgY29uc3Qga2V5czEgPSBPYmplY3Qua2V5cyhkYXRhMSk7XG4gIGNvbnN0IGtleXMyID0gT2JqZWN0LmtleXMoZGF0YTIpO1xuXG4gIGNvbnN0IGNvbW1vbktleXMgPSBfLnVuaXEoa2V5czEuY29uY2F0KGtleXMyKSk7XG5cbiAgY29uc3QgcmVzdWx0ID0gY29tbW9uS2V5cy5tYXAoKGtleSkgPT4ge1xuICAgIGNvbnN0IHZhbHVlMSA9IGRhdGExW2tleV07XG4gICAgY29uc3QgdmFsdWUyID0gZGF0YTJba2V5XTtcbiAgICBpZiAoXy5oYXMoZGF0YTEsIGtleSkgJiYgXy5oYXMoZGF0YTIsIGtleSkpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUxID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsdWUyID09PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4geyBzdGF0dXM6ICd1bmNoYW5nZWQnLCBrZXksIGNoaWxkcmVuOiBidWlsZEFzdCh2YWx1ZTEsIHZhbHVlMil9O1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlMSAhPT0gdmFsdWUyKSB7XG4gICAgICAgIHJldHVybiBbeyBzdGF0dXM6ICdyZW1vdmVkJywga2V5LCB2YWx1ZTogdmFsdWUxfSwgeyBzdGF0dXM6ICdhZGRlZCcsIGtleSwgdmFsdWU6IHZhbHVlMiB9XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7IHN0YXR1czogJ3VuY2hhbmdlZCcsIGtleSwgdmFsdWU6IHZhbHVlMX07XG4gICAgfVxuICAgIGlmIChfLmhhcyhkYXRhMSwga2V5KSAmJiAhXy5oYXMoZGF0YTIsIGtleSkpIHtcbiAgICAgIHJldHVybiB7IHN0YXR1czogJ3JlbW92ZWQnLCBrZXksIHZhbHVlOiB2YWx1ZTF9O1xuICAgIH1cbiAgICBpZiAoIV8uaGFzKGRhdGExLCBrZXkpICYmIF8uaGFzKGRhdGEyLCBrZXkpKSB7XG4gICAgICByZXR1cm4geyBzdGF0dXM6ICdhZGRlZCcsIGtleSwgdmFsdWU6IHZhbHVlMiB9O1xuICAgICAgfVxuICAgIH0pO1xuICByZXR1cm4gXy5mbGF0dGVuKHJlc3VsdCk7XG59O1xuXG5jb25zdCBzdHJpbmdpZnkgPSAob2JqZWN0LCBnYXApID0+IHtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG4gIGNvbnN0IHJlc3VsdCA9IGtleXMucmVkdWNlKChhY2MsIGtleSkgPT4gYCR7YWNjfSR7JyAnLnJlcGVhdChnYXApfSR7a2V5fTogJHtvYmplY3Rba2V5XX1gLCAnJyk7XG4gIHJldHVybiBge1xcbiR7cmVzdWx0fVxcbiR7JyAnLnJlcGVhdChnYXAgLSA0KX19YFxufVxuXG5jb25zdCBkaWZmID0gKGFzdCwgZ2FwID0gMCkgPT4ge1xuICBjb25zdCBzaWduID0ge1xuICAgIHVuY2hhbmdlZDogJyAgJyxcbiAgICBhZGRlZDogJysgJyxcbiAgICByZW1vdmVkOiAnLSAnLFxuICB9O1xuICBjb25zdCByZXN1bHQgPSBhc3QucmVkdWNlKChhY2MsIHsgc3RhdHVzLCBrZXksIHZhbHVlLCBjaGlsZHJlbiB9KSA9PiB7XG4gICAgaWYgKGNoaWxkcmVuKSB7XG4gICAgICByZXR1cm4gYCR7YWNjfVxcbiR7JyAnLnJlcGVhdChnYXAgKyAyKX0ke3NpZ25bc3RhdHVzXX0ke2tleX06ICR7ZGlmZihfLmZsYXR0ZW4oY2hpbGRyZW4pLCBnYXAgKyA0KX1gO1xuICAgIH1cbiAgICBjb25zdCBuZXdWYWx1ZSA9IHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgPyBzdHJpbmdpZnkodmFsdWUsIGdhcCArIDgpIDogdmFsdWU7XG4gICAgcmV0dXJuIGAke2FjY31cXG4keycgJy5yZXBlYXQoZ2FwICsgMil9JHtzaWduW3N0YXR1c119JHtrZXl9OiAke25ld1ZhbHVlfWA7XG4gIH0sICcnKTtcbiAgcmV0dXJuIGB7JHtyZXN1bHR9XFxuJHsnICcucmVwZWF0KGdhcCl9fWA7XG59O1xuXG5leHBvcnQgZGVmYXVsdCAocGF0aFRvRmlsZTEsIHBhdGhUb0ZpbGUyKSA9PiB7XG4gIGNvbnN0IG9iamVjdDEgPSBwYXJzZXJzKHBhdGhUb0ZpbGUxKTtcbiAgY29uc3Qgb2JqZWN0MiA9IHBhcnNlcnMocGF0aFRvRmlsZTIpO1xuICAvL2NvbnNvbGUubG9nKGtleXMxLCB2YWx1ZXMxKTtcbiAgLy92YWx1ZXMxLm1hcCgodikgPT4gY29uc29sZS5sb2codHlwZW9mIHYpKTtcbiAgY29uc3QgZGF0YUFzdCA9IGJ1aWxkQXN0KG9iamVjdDEsIG9iamVjdDIpO1xuICByZXR1cm4gZGlmZihkYXRhQXN0KTtcbn07XG4iXX0=